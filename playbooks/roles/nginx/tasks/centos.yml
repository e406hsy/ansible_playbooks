- name: Install docker python package
  pip:
    name: docker

- name: Pull an image
  community.docker.docker_image:
    name: nginx
    source: pull

- name: Create a directory if it does not exist
  ansible.builtin.file:
    path: "/etc/nginx/"
    state: directory
    mode: '0644'

- name: touch nginx config if not exists
  ansible.builtin.file:
    path: /etc/nginx/nginx.conf
    state: touch
    mode: 0644

- name: copy nginx config template
  template:
    src: nginx.conf
    dest: nginx.conf
    mode: 0644

- name : change nginx config
  shell : cat nginx.conf > /etc/nginx/nginx.conf

- name: remove nginx config template
  ansible.builtin.file:
    path: nginx.conf
    state: absent

- name: ssl cert gen
  import_tasks: cert.yml
  when: "config.init_cert == true"

- name: Create a network
  community.docker.docker_network:
    name: "nginx_network"

- name: Setting host facts using complex arguments
  ansible.builtin.set_fact:
    base_paths: "{{ servers_to_connect | map(attribute='domain') | map('regex_replace', '^(.*)$', '/etc/nginx/') }}"
    cert_file_names: "{{ servers_to_connect | map(attribute='domain') | product(['crt']) | map('join','.') }}"
    key_file_names: "{{ servers_to_connect | map(attribute='domain') | product(['key']) | map('join','.') }}"

- name: Setting host facts using complex arguments
  ansible.builtin.set_fact:
    cert_file_paths : "{{ base_paths | zip(cert_file_names) | map('join','') }}"
    key_file_pathss : "{{ base_paths | zip(key_file_names) | map('join','') }}"

- name: Create a nginx container
  community.docker.docker_container:
    name: nginx
    image: nginx
    restart: "{{ config.init_cert == true | ternary('yes','no') }}"
    ports:
      - "{{ domain.port }}:{{ domain.port }}"
    volumes: "{{ cert_file_paths | zip(cert_file_paths) | map('join',':') | union ( key_file_pathss| zip(key_file_pathss) | map('join',':') ) + ['/etc/nginx/nginx.conf:/etc/nginx/nginx.conf'] }}"
    networks:
      - name: "nginx_network"
    restart_policy: unless-stopped

- name: nginx reload
  community.docker.docker_container_exec:
    container: nginx
    command: service nginx reload
  when: config.init_cert == false and config.force_reload == true 